{"version":3,"file":"Image.js","sourceRoot":"","sources":["../src/Image.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAClE,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,OAAO,SAAS,EAAE,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAc,eAAe,EAAE,MAAM,eAAe,CAAC;AAO5D,MAAM,OAAO,KAAM,SAAQ,KAAK,CAAC,SAAiC;IAChE,MAAM,CAAC,wBAAwB,CAAC,KAAiB;QAC/C,OAAO;YACL,MAAM,EAAE,KAAK,CAAC,SAAS;gBACrB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBACJ,IAAI,KAAK,CAAC,MAAM,EAAE;wBAChB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACjB;oBACD,KAAK,CAAC,SAAU,EAAE,CAAC;gBACrB,CAAC;gBACH,CAAC,CAAC,KAAK,CAAC,MAAM;YAChB,OAAO,EAAE,KAAK,CAAC,SAAS;gBACtB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBACJ,IAAI,KAAK,CAAC,OAAO,EAAE;wBACjB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAClB;oBACD,KAAK,CAAC,SAAU,EAAE,CAAC;gBACrB,CAAC;gBACH,CAAC,CAAC,KAAK,CAAC,OAAO;SAClB,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAW;QAC/B,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;YAC7B,MAAM,IAAI,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;SACpD;QACD,OAAO,MAAM,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,gBAAgB;QAC3B,OAAO,eAAe,CAAC,gBAAgB,EAAE,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,cAAc;QACzB,OAAO,eAAe,CAAC,cAAc,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,GAAG;QACN,MAAM,EAAE,SAAS;QACjB,OAAO,EAAE,SAAS;KACnB,CAAC;IAEF,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvE,MAAM,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,SAAS,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;QACxF,MAAM,UAAU,GAAG,cAAc,IAAI,eAAe,IAAI,eAAe,CAAC,KAAK,CAAC;QAE9E,OAAO,CACL,oBAAC,SAAS,OACJ,SAAS,EACb,KAAK,EAAE,SAAS,EAChB,UAAU,EAAE,UAAU,EACtB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EACzB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,GAC3B,CACH,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport ExpoImage, { ExpoImageModule } from './ExpoImage';\nimport { ImageProps, ImageResizeMode } from './Image.types';\n\ntype ImageState = {\n  onLoad: ImageProps['onLoad'];\n  onError: ImageProps['onError'];\n};\n\nexport class Image extends React.Component<ImageProps, ImageState> {\n  static getDerivedStateFromProps(props: ImageProps) {\n    return {\n      onLoad: props.onLoadEnd\n        ? (e) => {\n            if (props.onLoad) {\n              props.onLoad(e);\n            }\n            props.onLoadEnd!();\n          }\n        : props.onLoad,\n      onError: props.onLoadEnd\n        ? (e) => {\n            if (props.onError) {\n              props.onError(e);\n            }\n            props.onLoadEnd!();\n          }\n        : props.onError,\n    };\n  }\n\n  /**\n   * **Available on @Android only.** Caching the image that can be later used in ImageView\n   * @return an empty promise.\n   */\n  static async prefetch(url: string): Promise<void> {\n    if (Platform.OS !== 'android') {\n      throw new UnavailabilityError('Image', 'prefetch');\n    }\n    return await ExpoImageModule.prefetch(url);\n  }\n\n  /**\n   * Clear all images from the memory cache.\n   * @returns An empty promise.\n   */\n  static async clearMemoryCache(): Promise<void> {\n    return ExpoImageModule.clearMemoryCache();\n  }\n\n  /**\n   * Asynchronously clear all images from the disk cache. Non-blocking method - returns immediately.\n   * @returns A promise resolving to `true` when the clear operation succeeded, otherwise `false`.\n   */\n  static async clearDiskCache(): Promise<boolean> {\n    return ExpoImageModule.clearDiskCache();\n  }\n\n  state = {\n    onLoad: undefined,\n    onError: undefined,\n  };\n\n  render() {\n    const { style, resizeMode: resizeModeProp, ...restProps } = this.props;\n\n    const { resizeMode: resizeModeStyle, ...restStyle } = StyleSheet.flatten([style]) || {};\n    const resizeMode = resizeModeProp ?? resizeModeStyle ?? ImageResizeMode.COVER;\n\n    return (\n      <ExpoImage\n        {...restProps}\n        style={restStyle}\n        resizeMode={resizeMode}\n        onLoad={this.state.onLoad}\n        onError={this.state.onError}\n      />\n    );\n  }\n}\n"]}